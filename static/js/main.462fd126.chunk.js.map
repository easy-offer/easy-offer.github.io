{"version":3,"sources":["components/common/CheckBox.tsx","components/common/RadioGroup.tsx","components/question/questionCard/index.tsx","components/question/questionBook/index.tsx","pages/homepage/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CheckBoxGroup","props","_this","Object","classCallCheck","this","_super","call","emptyMap","CheckBox","dynamicClass","classNames","checked","answered","correct","option","react_default","a","createElement","className","type","onChange","bind","assertThisInitialized","value","key","reset","viewBox","width","height","d","Map","options","map","o","set","state","event","newMap","console","log","current","get","target","setState","_this2","idx","React","Component","RadioGroup","Radio","onClick","checkedMap","QuestionCard","user_answer","answer","q","__typename","replaceAll","split","sort","join","Card","Title","title","Body","RadioGroup_RadioGroup","check","CheckBox_CheckBoxGroup","Button","variant","submit","fetchDataGQL","gql","_templateObject","taggedTemplateLiteral","QuestionBook","_useState","useState","questions","loading","page","end","_useState2","slicedToArray","loadMoreInspector","useRef","useEffect","length","observer","IntersectionObserver","entries","forEach","e","intersectionRatio","objectSpread2","observe","_useQuery","useQuery","variables","limit","offset","fetchPolicy","error","data","concat","cards","val","push","ref","questionCard_QuestionCard","endMark","LIST_QUESTIONS","homepage_templateObject","HomePage","refetch","Container","fluid","Row","Col","style","background","sm","questionBook","qs","App","pages_homepage","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","defaultOptions","watchQuery","errorPolicy","query","ReactDOM","render","ApolloProvider","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.462fd126.chunk.js","sourcesContent":["'use strict';\nimport classNames from 'classnames';\nimport React from 'react';\nimport './CheckBox.css';\nimport { Option } from '../../types';\nimport { isImportOrExportSpecifier, isThisTypeNode } from 'typescript';\n\n\ntype CbProp = {\n  ind: string,\n  value: string,\n  answered: boolean,\n  correct: boolean,\n  onChange?: Function,\n}\ntype CbProps = {\n  option: Option,\n  key: number,\n  checked: boolean\n}\n\ntype CbGroupProps = {\n  options: Option[],\n  reset: boolean,\n  answered: boolean,\n  onChange?: Function  \n}\n\ntype CbState = {\n  checked: boolean\n}\n\ntype CbGroupState = {\n  checked: Map<string,boolean>\n}\n\nexport default class CheckBoxGroup extends React.Component<CbGroupProps, CbGroupState> {\n  emptyMap;\n  constructor(props: CbGroupProps) {\n    super(props);\n    this.emptyMap = new Map();\n    props.options.map((o)=>{\n      this.emptyMap.set(o.key, false);\n    });\n    this.state = {\n      checked: new Map(this.emptyMap)\n    }    \n  }\n\n  onChange(event: any) {\n    let newMap: Map<string, boolean>;\n    if (this.props.reset) {\n      console.log('reset map');\n      newMap = new Map(this.emptyMap);\n    } else {\n      newMap = new Map(this.state.checked);\n    }\n    const current = !(newMap.get(event.target.value) || false);\n    newMap.set(event.target.value,current);\n    this.setState({\n      checked: newMap\n    })\n    if (this.props.onChange) this.props.onChange({\n      checked: current,\n      value: event.target.value\n    });\n  }\n\n  CheckBox = (props:CbProps) => {\n    const dynamicClass = classNames({\n      'checked': props.checked,\n      'answered': this.props.answered,\n      'correct': props.option.correct\n    });\n    return (\n      <label className={'checkbox ' + dynamicClass}>\n        <input type=\"checkbox\" className='cb_input' onChange={this.onChange.bind(this)} value={props.option.key}></input>\n\n        <div className='cb_indicator'>\n          {\n            ((!this.props.reset && !this.props.answered && props.checked) || (this.props.answered && props.option.correct)) && \n            <svg viewBox='0 0 11 8' width='9' height='7' className={'checkmark ' + dynamicClass}>\n              <title>checkmark</title>\n              <path d=\"M9.6,0L11,1.3L3.9,8L0,4.3L1.4,3l2.6,2.4L9.6,0z\"></path>\n            </svg>\n          }\n          {\n            (this.props.answered && !props.option.correct)  &&\n            <svg viewBox='0 0 10 10' width='8' height='8' className={'exmark ' + dynamicClass}>\n              <title>exmark</title>\n              <path d=\"M5,4.17,9.17,0,10,.83,5.83,5,10,9.17,9.17,10,5,5.83.83,10,0,9.17,4.17,5,0,.83.83,0Z\"></path>\n            </svg>\n          }\n        </div>\n\n        <div className='cb_label'> { props.option.value } </div>\n      </label>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"checkbox_group\">\n        {\n          this.props.options.map((o,idx) => {\n            return <this.CheckBox\n              key={idx}\n              option={o}\n              checked={this.state.checked.get(o.key) || false}\n            ></this.CheckBox>\n          })\n        }\n      </div>\n    )\n  }\n}","'use strict';\n\nimport React from \"react\";\nimport './RadioGroup.css';\nimport { Option } from '../../types';\nimport classNames from \"classnames\";\n\ntype RadioProps = {\n  option: Option,\n  key: number,\n  checked: boolean\n}\n\ntype RadioGroupProps = {\n  options: Option[],\n  reset: boolean,\n  answered: boolean,\n  onChange?: Function\n};\n\ntype RadioGroupState = {\n  checked: Map<string,boolean>\n}\nexport default class RadioGroup extends React.Component<RadioGroupProps, RadioGroupState> {\n  constructor(props: RadioGroupProps) {\n    super(props);\n    const checkedMap = new Map();\n    props.options.map((o)=>{\n      checkedMap.set(o.key, false);\n    })\n    this.state = {\n      checked: checkedMap\n    }\n  }\n \n  onClick(event:any) {\n    if (this.props.onChange) this.props.onChange(event.target);\n    const newMap = new Map();\n    this.props.options.map((o)=>{\n      newMap.set(o.key, false);\n    })\n    newMap.set(event.target.value, true);\n    this.setState({\n      checked: newMap\n    })\n  }\n\n  Radio = (props:RadioProps) => {\n    const dynamicClass = classNames({\n      'correct': props.option.correct,\n      'answered': this.props.answered,\n      'checked': props.checked,\n    });\n    return (\n    <label className={'radio ' + dynamicClass}>\n      <input \n        type='radio'\n        className='radio_input'\n        onClick={this.onClick.bind(this)}\n        value={props.option.key}\n        key={props.key}\n      ></input>\n      <div className='radio_indicator'>\n        {\n          (( !this.props.reset && !this.props.answered && props.checked) || (this.props.answered && props.option.correct)) &&\n          <svg viewBox='0 0 11 8' width='9' height='7' className={'checkmark ' + dynamicClass}>\n            <title>checkmark</title>\n            <path d=\"M9.6,0L11,1.3L3.9,8L0,4.3L1.4,3l2.6,2.4L9.6,0z\"></path>\n          </svg>\n        }\n        {\n            (this.props.answered && !props.option.correct)  &&\n            <svg viewBox='0 0 10 10' width='8' height='8' className={'exmark ' + dynamicClass}>\n              <title>exmark</title>\n              <path d=\"M5,4.17,9.17,0,10,.83,5.83,5,10,9.17,9.17,10,5,5.83.83,10,0,9.17,4.17,5,0,.83.83,0Z\"></path>\n            </svg>\n          }\n      </div>\n      <div className='radio_label'> {props.option.value}</div>\n    </label>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"radio_group\">\n        {\n          this.props.options.map((o,idx) => {\n            return <this.Radio \n              key={idx}\n              option={o}\n              checked={this.state.checked.get(o.key) || false}\n            ></this.Radio>\n          })\n        }\n      </div>\n    );\n  }\n}","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport { Button } from '@mui/material';\n\nimport './index.css';\nimport { Option, Question } from '../../../types';\nimport CheckBoxGroup from '../../common/CheckBox';\nimport RadioGroup from '../../common/RadioGroup';\nimport classNames from 'classnames';\nimport { toUpper } from 'lodash';\n\ntype CardProp = {\n    q: Question\n};\n\ntype CardState = {\n    user_answer: string,\n    correct: boolean,\n    reset: boolean,\n    answered: boolean,\n}\n\n\ntype OptionProp = {\n    options: Option[],\n    answered: boolean\n};\n\nexport default class QuestionCard extends React.Component<CardProp, CardState> {\n    constructor(props: CardProp) {\n        super(props);\n        this.state = {\n            user_answer: '',\n            correct: false,\n            reset: true,\n            answered: false\n        }\n    }\n\n    check(target:any) {\n        let answer='';\n        if (this.props.q.__typename === 'MultiSelectQuestion') {\n            if (target.checked) {\n                answer = this.state.user_answer + target.value;\n            } else {\n                answer = this.state.user_answer.replaceAll(target.value, '');\n            }\n            answer = answer.replaceAll(',', '').split('').sort().join(',');\n        } else {\n            answer = target.value;\n        }\n        this.setState({\n            user_answer: answer,\n            correct: this.props.q.answer === answer,\n            reset: false\n        })\n    }\n\n    submit(event:any) {\n        const current = this.state.answered;\n        this.setState({\n            answered: !current,\n            reset: current,\n            user_answer: ''\n        })\n    }\n\n    render(): React.ReactNode {\n        const dynamicClass = classNames({\n            'correct': this.state.correct,\n            'answered': this.state.answered\n        })\n        return <Card className='question_card text-center m-3 p-3'>\n            <Card.Title>Q: {this.props.q.title}</Card.Title>\n            <Card.Body>\n            {\n                (this.props.q.__typename === 'SelectQuestion') &&\n                <RadioGroup \n                    options={this.props.q.options}\n                    reset={this.state.reset}\n                    answered={this.state.answered}\n                    onChange={this.check.bind(this)}\n                ></RadioGroup>\n            }\n            {\n                (this.props.q.__typename === 'MultiSelectQuestion') &&\n                <CheckBoxGroup\n                    options={this.props.q.options}\n                    reset={this.state.reset}\n                    answered={this.state.answered}\n                    onChange={this.check.bind(this)}\n                 ></CheckBoxGroup>\n            }\n\n                <div className={ 'feedback ' + dynamicClass }>\n                    {this.state.correct ? 'CORRECT' : 'INCORRECT'}\n                </div>\n\n                <Button \n                    className = { 'btn_submit ' + dynamicClass }\n                    variant=\"outlined\"\n                    onClick={this.submit.bind(this)}\n                > \n\n                { this.state.answered ? 'Take Again' : 'Submit' }\n                </Button>\n            </Card.Body>\n        </Card>\n    }\n\n}\n","import React, { useEffect, useReducer, useRef, useState } from 'react';\nimport {gql, useQuery} from \"@apollo/client\";\nimport { Question } from '../../../types';\nimport QuestionCard from './../questionCard';\n\nconst PER_PAGE: number = 5;\n\ntype BookProp = {\n    qs: Question[]\n}\n\nconst qReducer = (state: any, action: any) => {\n    switch (action.type) {\n        case 'FETCH':\n            return {...state, 'loading': true};\n        case 'CONCAT':\n            if (state.loading) {\n                return {'questions': state.questions.concat(action.questions), 'loading': false};\n            }\n            return state;\n        default:\n            throw new Error();\n    }\n}\n\nconst fetchDataGQL = gql`\nquery TestQuery($limit: Float = 10, $offset: Float = 0) {\n  __typename\n  questions(limit: $limit, offset: $offset) {\n    ...on IQuestion{\n      title,\n      body,\n      answer\n    },\n    ...on SelectQuestion{\n      options {\n        key,\n        value,\n        correct\n      }\n    },\n    ...on MultiSelectQuestion {\n      options {\n        key,\n        value,\n        correct\n      }\n    }\n  }\n}    \n`;\n\nconst QuestionBook = (props: BookProp) => {\n\n    const [state, setState] = useState({\n        questions: [],\n        loading: true,\n        page: 0,\n        end: false\n    })\n    const loadMoreInspector = useRef(null);\n\n    useEffect(() => {\n        console.log('Current Page:' +  state.page);\n        console.log('Total Questions:' + state.questions.length);\n\n        const observer = new IntersectionObserver((entries) => {\n            entries.forEach((e) => {\n                if (e.intersectionRatio > 0 && !state.loading && !state.end) {\n                    setState({...state, page: state.page + 1, loading: true});\n                }\n            })\n        });\n        if (loadMoreInspector.current) observer.observe(loadMoreInspector.current);\n    });\n\n    const {error, data} = useQuery(fetchDataGQL, {\n        variables: {\n            'limit': PER_PAGE,\n            'offset': state.page * PER_PAGE\n        },\n        fetchPolicy: 'no-cache'\n    });\n    if (state.loading && data) {\n        setState({\n            ...state,\n            'questions': state.questions.concat(data.questions),\n            'loading': false,\n            'end': data.questions.length < PER_PAGE\n        });\n    }\n    if (error) {\n        console.log('ERROR');\n        console.log(error);\n    }\n\n    if (!state.questions || !state.questions.length ) {\n        return <div>Loading</div>\n    }\n    const cards: JSX.Element[] = [];\n    state.questions.map((val: any, idx: number) => {\n        if (idx === state.questions.length -2) {\n            cards.push(<div className='dumb' ref={loadMoreInspector}></div>);\n        }\n        cards.push(<QuestionCard q={val} key={idx}></QuestionCard>)\n    })\n    const endMark = <div>\n        end of questions\n    </div>\n    return <div>\n        {cards}\n        {endMark}\n    </div>\n};\n\n// function fetchQ(page: number = 0): Question[] {\n//     const offset = page * PER_PAGE;\n//     const LIST_QUESTIONS = gql`\n//     query TestQuery {\n//       __typename\n//       questions(limit: PER_PAGE, offset: offset) {\n//         ...on IQuestion{\n//           title,\n//           body,\n//           answer\n//         },\n//         ...on SelectQuestion{\n//           options {\n//             key,\n//             value,\n//             correct\n//           }\n//         },\n//         ...on MultiSelectQuestion {\n//           options {\n//             key,\n//             value,\n//             correct\n//           }\n//         }\n//       }\n//     }\n//     `;\n//     const { data, refetch } = useQuery(LIST_QUESTIONS, {\n//         fetchPolicy: 'no-cache'\n//     });\n//     return data.questions;\n// }\n\nexport default QuestionBook;","import React, { useRef, useState } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport {gql, useQuery} from \"@apollo/client\";\nimport QuestionBook from '../../components/question/questionBook';\nimport './index.css';\n\nconst LIST_QUESTIONS = gql`\nquery TestQuery {\n  __typename\n  questions(limit: 5, offset: 0) {\n    ...on IQuestion{\n      title,\n      body,\n      answer\n    },\n    ...on SelectQuestion{\n      options {\n        key,\n        value,\n        correct\n      }\n    },\n    ...on MultiSelectQuestion {\n      options {\n        key,\n        value,\n        correct\n      }\n    }\n  }\n}\n`;\n\n\n\nconst HomePage = () => {\n  const { loading, error, data, refetch } = useQuery(LIST_QUESTIONS, {\n    fetchPolicy: 'no-cache'\n  });\n  if (loading) return <p> loading.. </p>;\n  return <div className=\"HomePage\">\n    <Container fluid>\n        <Row>\n            <Col style={{background: 'grey', height: '100vh'}} sm={3}>\n            </Col>\n            <Col>\n                <Row className='fixed_header' style={{background: 'darkgrey', height: '10vh'}}>\n                  <div>\n\n                  </div>\n                </Row>\n                <Row className='infinite_scroll main' style={{background: '#fff', height: '100vh'}}>\n                    <QuestionBook qs={data.questions}></QuestionBook>\n                </Row>\n            </Col>\n        </Row>\n    </Container>\n\n  </div>\n};\n\nexport default HomePage;","import React from 'react';\nimport logo from './logo.svg';\nimport HomePage from './pages/homepage';\nimport './App.css';\nimport { render } from '@testing-library/react';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomePage></HomePage>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  DefaultOptions\n} from \"@apollo/client\";\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst defaultOptions: DefaultOptions = {\n  watchQuery: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'ignore',\n  },\n  query: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'all',\n  },\n}\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:3000/graphql',\n  cache: new InMemoryCache(),\n  defaultOptions: defaultOptions\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}